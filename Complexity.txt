1. T(n) = log2 n
T(100) = log2(100) ≈ 6.64
T(101) = log2(101) ≈ 6.66 = 1.003 * T(100)      -- 0.3%   longer
T(200) = log2(200) ≈ 7.64 = 1.150 * T(100)		-- 15% 	  longer
T(10000) = log2(10000) ≈ 13.29 = 2.002 * T(100) -- 100.2% longer
100000 = log2(n), n= 2^100000


2. T(n) = n
T(100) = 100
T(101) = 101 	 = 1.01*T(100) 		--1% longer
T(200) = 200	 = 2*T(100)			--2x longer
T(10000) = 10000 = 100*T(100)		--100x longer
100000 = n, n = 100000 


4. T(n) = n^2
T(100) = 100^2 = 10000
T(101) = 101^2 = 10201 = 1.0201*T(100) 			--2.01% longer
T(200) = 200^2 = 40000 = 4*T(100)				--4x longer
T(10000) = 10000^2 = 100000000 = 10000*T(100)	--10000x longer


D) 100000 = n^2. n = square root of 100000. n = 316.23 = 316


5. T(n) = n^3
T(100) = 100^3 = 1000000
T(101) = 101^3 = 1030301 = 1.03*T(100)						--3.0301% longer
T(200) = 200^3 = 8000000 = 8 * T(100)						--8x longer
T(10000) = 10000^3 = 1 000 000 000 000 = 1000000 * T(100)	--1000000x longer

D) 100000 = n^3. n = 100000^(1/3) = 46.42 = 46


6. T(n) = 2^n
T(100) = 2^100 = 1.268 * 10^30
T(101) = 2^101 = 2.535 * 10^30 = 2 * T(100)						-- 2x longer
T(200) = 2^200 = 1.607 * 10^60 = 1.267*10^30 * T(100)			-- approximately 1.267*10^30x longer
T(10000) = 2^10000 = 1.995 * 10^3010 = 1.563*10^2980 * T(100)   -- approximately  1.563*10^2980x longer

D) 100000 = 2^n. n = 16.61. heltalet = 16.



Ex1
loop runs n times
For each value of i, the loop runs n times
Total is: (n) , O(n)


Ex2
outer loop runs n times
For each value of i, inner loop runs n-1 times(from 1 to n-1)
Total is: n(n-1), O(n^2)

Ex3
First loop runs n times, second loop runs n times
Total is: (n-1)+n, O(n)

Ex4
First loop runs log n times, second loop runs n^2 times
Total is: (log n)+n^2, O(n^2)

Ex5
First outer loop runs n times, inner loop runs(n-1)/2 and outer loop runs n times
Total is: n((n-1)/2)+n = O(n^2)

Ex6
Function runs n times since it recursively calls itself until n = 0
Total is: O(n)

Ex7
Loop runs n times but the function decreases n each recursive call
Total is: n+n!, O(n!)

Ex8
Function divides n by 2
Total is: O(log n)

Ex9
Loop runs n times but the function divides n by 2
Total is: O(n log n)

Ex10
Function calls itself twice for each recursive step
Total is: O(2^n)
